{"version":3,"sources":["constants/instruments.js","hooks/useSequencer.js","hooks/useDoubleClick.js","components/basic/Step.js","constants/color.js","components/Sequencer.js","engines/kick.js","engines/snare.js","hooks/useSoundEngine.js","components/SoundSystem.js","App.js","reportWebVitals.js","index.js"],"names":["instrumentList","sequencerContext","createContext","SequencerProvider","Provider","ProviderSequencer","children","sequencer","useSequencerProvider","value","useSequencer","useContext","defaultStepLists","map","el","name","stepList","Array","fill","useImmer","stepLists","setStepLists","useState","updateStep","rowIndex","stepIndex","velocity","prevState","currentStep","setCurrentStep","resetSteps","useDoubleClick","ref","latency","onSingleClick","onDoubleClick","useEffect","clickRef","current","clickCount","handleClick","e","setTimeout","addEventListener","removeEventListener","stepStyle","isCurrent","index","width","height","borderRadius","margin","marginRight","border","backgroundColor","Step","handleDoubleClick","stepRef","useRef","style","rowStyle","display","rootStyle","position","titleStyle","Sequencer","Kick","synth","Tone","toDestination","trigger","duration","time","triggerAttackRelease","Snare","lowPass","Filter","frequency","noise","NoiseSynth","volume","type","playbackRate","envelope","attack","decay","sustain","release","connect","PolySynth","Synth","oscillator","partials","triggerAttack","useSoundEngine","bpm","kickTrigger","useMemo","snareTrigger","loop","setLoop","idx","scheduleIdx","clear","schedule","forEach","toSeconds","setLoopPoints","Object","entries","updateLoop","now","SoundSystem","setBpm","placeholder","min","onChange","parseFloat","target","onClick","start","pause","flexDirection","justifyContent","alignItems","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f46ec2b.chunk.js","sourcesContent":["export const instrumentList = [\"kick\", \"snare\"];\nexport const stepNum = 16;\n","import React, { useState, useEffect, createContext, useContext } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport { instrumentList, stepNum } from \"constants/instruments\";\nconst sequencerContext = createContext();\nconst { Provider: SequencerProvider } = sequencerContext;\n\nexport const ProviderSequencer = ({ children }) => {\n  const sequencer = useSequencerProvider();\n  return <SequencerProvider value={sequencer}>{children}</SequencerProvider>;\n};\nconst useSequencer = () => {\n  return useContext(sequencerContext);\n};\nexport default useSequencer;\n\nconst useSequencerProvider = () => {\n  const defaultStepLists = instrumentList.map((el) => ({\n    name: el,\n    stepList: new Array(stepNum).fill(0),\n  }));\n  const [stepLists, setStepLists] = useImmer(defaultStepLists);\n  const [currentStep, setCurrentStep] = useState(0);\n  const updateStep = (rowIndex, stepIndex, velocity) => {\n    setStepLists((prevState) => {\n      prevState[rowIndex].stepList[stepIndex] = velocity;\n    });\n  };\n  const resetSteps = () => {\n    setStepLists(() => defaultStepLists);\n  };\n\n  return {\n    stepLists,\n    updateStep,\n    currentStep,\n    setCurrentStep,\n    resetSteps,\n  };\n};\n","import { useEffect } from \"react\";\n\nconst useDoubleClick = ({\n  ref,\n  latency = 200,\n  onSingleClick = () => null,\n  onDoubleClick = () => null,\n}) => {\n  useEffect(() => {\n    const clickRef = ref.current;\n    let clickCount = 0;\n    const handleClick = (e) => {\n      clickCount += 1;\n\n      setTimeout(() => {\n        if (clickCount === 1) onSingleClick(e);\n        else if (clickCount === 2) onDoubleClick(e);\n\n        clickCount = 0;\n      }, latency);\n    };\n\n    // Add event listener for click events\n    clickRef.addEventListener(\"click\", handleClick);\n\n    // Remove event listener\n    return () => {\n      clickRef.removeEventListener(\"click\", handleClick);\n    };\n  });\n};\n\nexport default useDoubleClick;\n","import React, { useState, useRef } from \"react\";\nimport useSequencer from \"hooks/useSequencer\";\nimport useDoubleClick from \"hooks/useDoubleClick\";\nimport {\n  stepOnColor,\n  stepOnHeavyColor,\n  currStepColor,\n  currAndOnStepColor,\n} from \"constants/color\";\nconst stepStyle = (velocity, isCurrent, index) => ({\n  width: \"2vw\",\n  height: \"2vw\",\n  borderRadius: \"15px\",\n  margin: \"0.5vw\",\n  marginRight: (index + 1) % 4 === 0 ? \"1.4vw\" : \"0.5vw\",\n  border: `1px solid black`,\n  backgroundColor:\n    isCurrent && velocity > 0\n      ? currAndOnStepColor\n      : isCurrent && velocity === 0\n      ? currStepColor\n      : velocity > 0.9\n      ? stepOnHeavyColor\n      : velocity > 0\n      ? stepOnColor\n      : \"white\",\n});\n\nconst Step = ({\n  index,\n  velocity,\n  handleClick,\n  isCurrent,\n  handleDoubleClick,\n}) => {\n  const stepRef = useRef();\n\n  useDoubleClick({\n    onSingleClick: handleClick,\n    onDoubleClick: handleDoubleClick,\n    ref: stepRef,\n    latency: 250,\n  });\n\n  return (\n    <div ref={stepRef} style={stepStyle(velocity, isCurrent, index)}></div>\n  );\n};\nexport default Step;\n","export const greenColor = \"#00ff7f\";\nexport const stepOnColor = \"#14F396\";\nexport const stepOnHeavyColor = \"#0a794b\";\nexport const currStepColor = \"#FFA500\";\nexport const currAndOnStepColor = \"#ffff00\";\n","import React from \"react\";\nimport useSequencer from \"hooks/useSequencer\";\nimport Step from \"components/basic/Step\";\n\nconst rowStyle = { display: \"flex\", width: \"100%\" };\nconst rootStyle = { position: \"relative\" };\nconst titleStyle = { width: \"50px\" };\nconst Sequencer = () => {\n  const { stepLists, updateStep, currentStep } = useSequencer();\n\n  return (\n    <div style={rootStyle}>\n      {/* <div style={stepIndicatorStyle(step)} /> */}\n      {stepLists.map((el, rowIndex) => (\n        <div style={rowStyle} key={rowIndex}>\n          <div style={titleStyle}>{el.name}</div>\n          {el.stepList.map((velocity, index) => (\n            <Step\n              key={index}\n              index={index}\n              velocity={velocity}\n              handleClick={(e) => {\n                updateStep(rowIndex, index, velocity > 0 ? 0 : 0.8);\n              }}\n              handleDoubleClick={() => {\n                updateStep(rowIndex, index, 1);\n              }}\n              isCurrent={index === currentStep}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\nexport default Sequencer;\n","import * as Tone from \"tone\";\n\nconst Kick = () => {\n  const synth = new Tone.MembraneSynth().toDestination();\n\n  const trigger = (duration, time, velocity) => {\n    synth.triggerAttackRelease(\"C2\", duration, time, velocity);\n  };\n  return { trigger };\n};\nexport default Kick;\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Filter,\n  Frequency,\n  NoiseSynth,\n  Part,\n  Synth,\n  PolySynth,\n  FrequencyEnvelope,\n  MembraneSynth,\n} from \"tone\";\n\nconst Snare = () => {\n  const lowPass = new Filter({\n    frequency: 11000,\n  });\n\n  const noise = new NoiseSynth({\n    volume: -12,\n    noise: {\n      type: \"pink\",\n      playbackRate: 3,\n    },\n    envelope: {\n      attack: 0.001,\n      decay: 0.13,\n      sustain: 0,\n      release: 0.03,\n    },\n  })\n    .connect(lowPass)\n    .toDestination();\n\n  const poly = new PolySynth(Synth, {\n    volume: -10,\n    oscillator: {\n      partials: [0, 2, 3, 4],\n    },\n    envelope: {\n      attack: 0.001,\n      decay: 0.17,\n      sustain: 0,\n      release: 0.05,\n    },\n  }).toDestination();\n\n  const notes = [\"C2\", \"D#2\", \"G2\"];\n  const freqEnv = [];\n  // console.log(poly);\n  // poly.voices.forEach((v, i) => {\n  //   const env = new FrequencyEnvelope({\n  //     attack: 0.001,\n  //     decay: 0.08,\n  //     release: 0.08,\n  //     baseFrequency: Frequency(notes[i]),\n  //     octaves: Math.log2(13),\n  //     releaseCurve: \"exponential\",\n  //     exponent: 3.5,\n  //   });\n  //   env.connect(v.oscillator.frequency);\n  //   freqEnv[i] = env;\n  // });\n\n  const trigger = (duration, time, velocity) => {\n    noise.triggerAttack(time, velocity);\n    // poly.triggerAttackRelease([\"Eb3\", \"G4\", \"C5\"], \"16n\", time);\n  };\n  return { trigger };\n};\nexport default Snare;\n","import React, { useState, useEffect, useMemo } from \"react\";\nimport { useImmer } from \"use-immer\";\nimport * as Tone from \"tone\";\nimport Kick from \"engines/kick\";\nimport Snare from \"engines/snare\";\nimport useSequencer from \"hooks/useSequencer\";\n\nconst useSoundEngine = ({ bpm }) => {\n  Tone.Transport.bpm.value = bpm;\n  const { stepLists, setCurrentStep } = useSequencer();\n  const { trigger: kickTrigger } = useMemo(() => Kick(), []);\n  const { trigger: snareTrigger } = useMemo(() => Snare(), []);\n  const [loop, setLoop] = useImmer([]);\n\n  const updateLoop = () => {\n    for (let [idx, el] of Object.entries(stepLists)) {\n      let scheduleIdx;\n      if (loop[idx]) {\n        Tone.Transport.clear(loop[idx]);\n      }\n      switch (idx) {\n        case \"0\":\n          scheduleIdx = Tone.Transport.schedule((time) => {\n            stepLists[idx].stepList.forEach((velocity, stepIndex) => {\n              if (velocity > 0)\n                kickTrigger(\n                  \"16n\",\n                  time + stepIndex * Tone.Time(\"16n\").toSeconds(),\n                  velocity\n                );\n\n              Tone.Draw.schedule(() => {\n                setCurrentStep(stepIndex);\n              }, time + stepIndex * Tone.Time(\"16n\").toSeconds());\n            });\n          }, \"0\");\n          break;\n        case \"1\":\n          scheduleIdx = Tone.Transport.schedule((time) => {\n            stepLists[idx].stepList.forEach((velocity, stepIndex) => {\n              if (velocity)\n                snareTrigger(\n                  \"16n\",\n                  time + stepIndex * Tone.Time(\"16n\").toSeconds(),\n                  velocity\n                );\n            });\n          }, \"0\");\n        default:\n          break;\n      }\n      Tone.Transport.setLoopPoints(0, \"1m\");\n      Tone.Transport.loop = true;\n      setLoop((prevState) => {\n        prevState[idx] = scheduleIdx;\n      });\n    }\n  };\n\n  useEffect(() => {\n    updateLoop();\n  }, [stepLists]);\n\n  return { now: Tone.now() };\n};\n\nexport default useSoundEngine;\n","import React, { useState, useEffect } from \"react\";\nimport useSoundEngine from \"hooks/useSoundEngine\";\nimport * as Tone from \"tone\";\nimport useSequencer from \"hooks/useSequencer\";\n\nconst SoundSystem = () => {\n  const [bpm, setBpm] = useState(90);\n  const { now } = useSoundEngine({ bpm });\n  const { resetSteps } = useSequencer();\n  return (\n    <div>\n      BPM\n      <input\n        placeholder=\"bpm\"\n        type=\"number\"\n        min=\"1\"\n        onChange={(e) => {\n          setBpm(parseFloat(e.target.value));\n        }}\n        value={bpm}\n      />\n      <button\n        onClick={() => {\n          Tone.start();\n          Tone.Transport.start();\n        }}\n      >\n        start\n      </button>\n      <button\n        onClick={() => {\n          Tone.Transport.pause();\n        }}\n      >\n        Stop\n      </button>\n      <button\n        onClick={() => {\n          resetSteps();\n        }}\n      >\n        Reset\n      </button>\n    </div>\n  );\n};\nexport default SoundSystem;\n","import React, { useState, useEffect } from \"react\";\nimport Sequencer from \"components/Sequencer\";\nimport { ProviderSequencer } from \"hooks/useSequencer\";\nimport * as Tone from \"tone\";\nimport SoundSystem from \"components/SoundSystem\";\n\nconst rootStyle = {\n  width: \"100%\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n};\nconst App = () => {\n  return (\n    <div style={rootStyle}>\n      <h1>Drum Machine</h1>\n      <ProviderSequencer>\n        <SoundSystem />\n        <Sequencer />\n      </ProviderSequencer>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}